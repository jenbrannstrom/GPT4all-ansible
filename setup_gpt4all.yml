# This script is supposed to: 
# 1. create a VPC in your AWS account
# 2. Create subnets within the VPC and set up the route table and internet gateway
# 3. make RSA key pair and save it in the same dir 
# 4. launch Spot instance
# 5. get and assign an (elastic) IP address
# 6. configure the security settings so the IP is reachable from outside
# 7. start one of multiple steps to install GPT4ALL

---
- name: Set up GPT4All on AWS
  hosts: localhost
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "your_vpc_name"
        cidr_block: "10.0.0.0/16"
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: vpc

    - name: Create an Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: igw

    - name: Create a Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: route_table

    - name: Create a subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.1.0/24"
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: subnet

    - name: Associate Route Table to Subnet
      amazon.aws.ec2_vpc_route_table:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: GPT4All Route Table
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

    - name: Generate an RSA key pair
      ansible.builtin.openssh_keypair:
        path: "{{ playbook_dir }}/keypair_for_gpt4all"
        type: rsa
        size: 2048
      register: rsa_keypair

    - name: Import the public key to AWS
      amazon.aws.ec2_key:
        name: "Keypair for GPT4ALL"
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        key_material: "{{ rsa_keypair.public_key }}"
      register: aws_keypair
  
    - name: Launch Spot instance
      amazon.aws.ec2:
        state: present
        key_name: "{{ aws_keypair.key.name }}"
        instance_type: t2.micro
        image: ami-06e46074ae430fba6  # Amazon Linux 2 LTS AMI (HVM)
        wait: yes
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_tags:
          Name: GPT4All Instance
        spot_price: "0.0075"
        region: "us-east-1"
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        instance_initiated_shutdown_behavior: terminate
      register: ec2


    - name: Allocate a new Elastic IP
      amazon.aws.ec2_eip:
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      register: eip

    - name: Associate the new Elastic IP with the instance
      amazon.aws.ec2_eip:
        region: "us-east-1"
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        instance_id: "{{ ec2.instance_ids[0] }}"
        ip: "{{ eip.public_ip }}"

    - name: Set up GPT4All on AWS instance
      hosts: "{{ eip.public_ip }}"
      vars:
        ansible_ssh_private_key_file: "{{ playbook_dir }}/keypair_for_gpt4all"
        ansible_user: ec2-user
        ansible_python_interpreter: /usr/bin/python3
      tasks:
        - name: Install Python 3
          ansible.builtin.dnf:
            name: python3
            state: present
          become: yes

        - name: Create symlink for Python
          ansible.builtin.command: ln -sf /usr/bin/python3 /usr/bin/python
          args:
            creates: /usr/bin/python
          become: yes

        - name: Install Docker and its dependencies
          become: yes
          ansible.builtin.dnf:
            name: "{{ item }}"
            state: present
          loop:
            - docker
            - python3-pip

        - name: Install docker-compose
          become: yes
          ansible.builtin.pip:
            name: docker-compose
            state: latest
            extra_args: --ignore-installed
            executable: pip3

        - name: Start and enable Docker service
          become: yes
          ansible.builtin.systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add ec2-user to the docker group
          become: yes
          ansible.builtin.user:
            name: ec2-user
            groups: docker
            append: yes

        - name: Install the AWS CLI
          become: yes
          ansible.builtin.pip:
            name: awscli
            state: latest
            executable: pip3

        - name: Install git
          become: yes
          ansible.builtin.dnf:
            name: git
            state: present

        - name: Clone the GPT4All repository
          ansible.builtin.git:
            repo: https://github.com/nomic-ai/gpt4all.git
            dest: /home/ec2-user/gpt4all
              
        - name: Install Python packages from requirements.txt
          ansible.builtin.pip:
            chdir: /home/ec2-user/gpt4all
            requirements: /home/ec2-user/gpt4all/requirements.txt

        - name: Run generate.py script
          ansible.builtin.command:
            chdir: /home/ec2-user/gpt4all
            cmd: python generate.py

        - name: Create .env file
          ansible.builtin.template:
            src: env.j2
            dest: /home/ec2-user/gpt4all/.env

        - name: Pull and build Docker images
          ansible.builtin.docker_compose:
            chdir: /home/ec2-user/gpt4all
            project_src: /home/ec2-user/gpt4all
            state: present

        - name: Run Docker containers
          ansible.builtin.docker_compose:
            chdir: /home/ec2-user/gpt4all
            project_src: /home/ec2-user/gpt4all
            state: started
